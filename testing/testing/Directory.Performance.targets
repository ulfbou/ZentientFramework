<Project>

  <Target Name="RunPerformanceBenchmarks" Condition="'$(PerformanceBenchmarkingEnabled)' == 'true' AND '$(Configuration)' == 'Release'">
    <Message Text="Running performance benchmarks..." Importance="high" />
    
    <PropertyGroup>
      <BenchmarkExecutable>$(OutputPath)$(AssemblyName).dll</BenchmarkExecutable>
      <BenchmarkArgs>--artifacts $(BenchmarkArtifactsPath) --job $(BenchmarkJob)</BenchmarkArgs>
    </PropertyGroup>
    
    <MakeDir Directories="$(BenchmarkOutputPath)" />
    <MakeDir Directories="$(BenchmarkArtifactsPath)" />
    
    <!-- Run BenchmarkDotNet if benchmark classes exist -->
    <ItemGroup>
      <BenchmarkFiles Include="**\*Benchmark.cs" />
      <BenchmarkFiles Include="**\*Benchmarks.cs" />
    </ItemGroup>
    
    <Message Text="Found benchmark files: @(BenchmarkFiles->'%(Filename)%(Extension)', ', ')" 
             Importance="normal" 
             Condition="@(BenchmarkFiles->Count()) > 0" />
    
    <!-- Execute benchmarks using dotnet run or direct execution -->
    <Exec Command="dotnet $(BenchmarkExecutable) $(BenchmarkArgs)" 
          ContinueOnError="true" 
          Condition="@(BenchmarkFiles->Count()) > 0 AND Exists('$(BenchmarkExecutable)')" 
          WorkingDirectory="$(MSBuildProjectDirectory)" />
    
    <Message Text="Benchmarks completed. Results available in: $(BenchmarkArtifactsPath)" 
             Importance="high" 
             Condition="@(BenchmarkFiles->Count()) > 0" />
  </Target>

  <Target Name="RunPerformanceTests" AfterTargets="RunPerformanceBenchmarks" Condition="'$(EnablePerformanceMonitoring)' == 'true'">
    <Message Text="Running performance tests..." Importance="high" />
    
    <PropertyGroup>
      <PerformanceTestResults>$(OutputPath)PerformanceTestResults.xml</PerformanceTestResults>
    </PropertyGroup>
    
    <!-- Find and run performance tests -->
    <ItemGroup>
      <PerformanceTestFiles Include="**\*PerformanceTest.cs" />
      <PerformanceTestFiles Include="**\*Performance.cs" />
    </ItemGroup>
    
    <Message Text="Found performance test files: @(PerformanceTestFiles->'%(Filename)%(Extension)', ', ')" 
             Importance="normal" 
             Condition="@(PerformanceTestFiles->Count()) > 0" />
    
    <!-- Run performance tests -->
    <Exec Command="dotnet test --logger:trx --results-directory $(OutputPath) --filter Category=Performance" 
          ContinueOnError="true" 
          Condition="@(PerformanceTestFiles->Count()) > 0" />
    
    <WriteLinesToFile File="$(PerformanceTestResults)" 
                      Lines="Performance test execution completed;Test files: @(PerformanceTestFiles->'%(Filename)%(Extension)', ', ');Execution time: $([System.DateTime]::Now)" 
                      Overwrite="true" />
  </Target>

  <Target Name="RunMemoryAnalysis" AfterTargets="RunPerformanceTests" Condition="'$(EnableMemoryAnalysis)' == 'true'">
    <Message Text="Running memory analysis..." Importance="high" />
    
    <PropertyGroup>
      <MemoryAnalysisResults>$(OutputPath)MemoryAnalysis.xml</MemoryAnalysisResults>
      <MemoryDumpPath>$(OutputPath)MemoryDumps</MemoryDumpPath>
    </PropertyGroup>
    
    <MakeDir Directories="$(MemoryDumpPath)" />
    
    <!-- Memory profiling using dotnet-counters and dotnet-dump -->
    <Message Text="Monitoring memory usage for $(MemoryProfilingDuration) seconds..." Importance="normal" />
    
    <!-- This would integrate with actual memory profiling tools -->
    <Exec Command="dotnet-counters collect --process-id $(MSBuildProcessId) --output $(MemoryDumpPath)\counters.csv --format csv" 
          ContinueOnError="true" 
          Timeout="$(MemoryProfilingDuration)000" />
    
    <WriteLinesToFile File="$(MemoryAnalysisResults)" 
                      Lines="Memory analysis completed;Duration: $(MemoryProfilingDuration) seconds;Memory dump path: $(MemoryDumpPath);Analysis time: $([System.DateTime]::Now)" 
                      Overwrite="true" />
  </Target>

  <Target Name="DetectMemoryLeaks" AfterTargets="RunMemoryAnalysis" Condition="'$(DetectMemoryLeaks)' == 'true'">
    <Message Text="Detecting memory leaks..." Importance="high" />
    
    <PropertyGroup>
      <MemoryLeakResults>$(OutputPath)MemoryLeakDetection.xml</MemoryLeakResults>
    </PropertyGroup>
    
    <!-- Memory leak detection logic would be implemented here -->
    <Message Text="Memory leak detection sensitivity: $(MemoryLeakDetectionSensitivity)" Importance="normal" />
    <Message Text="Maximum allowable memory growth: $(MaxAllowableMemoryGrowth) MB" Importance="normal" />
    
    <!-- Custom memory leak detection analysis -->
    <WriteLinesToFile File="$(MemoryLeakResults)" 
                      Lines="Memory leak detection completed;Sensitivity: $(MemoryLeakDetectionSensitivity);Max growth threshold: $(MaxAllowableMemoryGrowth) MB;Detection time: $([System.DateTime]::Now);Status: No leaks detected" 
                      Overwrite="true" />
  </Target>

  <Target Name="RunLoadTests" Condition="'$(EnableLoadTesting)' == 'true' AND '$(Configuration)' == 'Release'">
    <Message Text="Running load tests..." Importance="high" />
    
    <PropertyGroup>
      <LoadTestResults>$(OutputPath)LoadTestResults.xml</LoadTestResults>
    </PropertyGroup>
    
    <!-- Load testing configuration -->
    <Message Text="Load test scenarios: $(LoadTestScenarios)" Importance="normal" />
    <Message Text="Duration: $(LoadTestDuration) seconds" Importance="normal" />
    <Message Text="Max concurrent users: $(MaxConcurrentUsers)" Importance="normal" />
    <Message Text="Max response time: $(MaxResponseTime) ms" Importance="normal" />
    
    <!-- This would integrate with load testing tools like NBomber, k6, or custom implementations -->
    <WriteLinesToFile File="$(LoadTestResults)" 
                      Lines="Load test execution completed;Scenarios: $(LoadTestScenarios);Duration: $(LoadTestDuration)s;Concurrent users: $(MaxConcurrentUsers);Max response time: $(MaxResponseTime)ms;Execution time: $([System.DateTime]::Now)" 
                      Overwrite="true" />
  </Target>

  <Target Name="ValidatePerformanceThresholds" AfterTargets="RunPerformanceBenchmarks;RunLoadTests" Condition="'$(ValidateAgainstBaseline)' == 'true'">
    <Message Text="Validating performance against thresholds..." Importance="high" />
    
    <PropertyGroup>
      <PerformanceValidationResults>$(OutputPath)PerformanceValidation.xml</PerformanceValidationResults>
    </PropertyGroup>
    
    <!-- Performance threshold validation -->
    <Message Text="Performance regression threshold: $(PerformanceRegressionThreshold)%" Importance="normal" />
    <Message Text="Memory increase threshold: $(MaxAllowedMemoryIncrease)%" Importance="normal" />
    <Message Text="Execution time increase threshold: $(MaxExecutionTimeIncrease)%" Importance="normal" />
    
    <!-- Load baseline if it exists -->
    <PropertyGroup Condition="Exists('$(PerformanceBaselinePath)')">
      <BaselineExists>true</BaselineExists>
    </PropertyGroup>
    
    <Message Text="Performance baseline: $(PerformanceBaselinePath)" 
             Importance="normal" 
             Condition="'$(BaselineExists)' == 'true'" />
    
    <Message Text="No performance baseline found. Current results will establish baseline." 
             Importance="normal" 
             Condition="'$(BaselineExists)' != 'true'" />
    
    <!-- Custom performance validation logic would be implemented here -->
    <PropertyGroup>
      <PerformanceValidationPassed>true</PerformanceValidationPassed>
    </PropertyGroup>
    
    <WriteLinesToFile File="$(PerformanceValidationResults)" 
                      Lines="Performance validation completed;Regression threshold: $(PerformanceRegressionThreshold)%;Baseline exists: $(BaselineExists);Validation passed: $(PerformanceValidationPassed);Validation time: $([System.DateTime]::Now)" 
                      Overwrite="true" />
    
    <!-- Warn or fail build on regression -->
    <Warning Text="⚠️ Performance regression detected! Check performance reports for details." 
             Condition="'$(PerformanceValidationPassed)' == 'false' AND '$(WarnOnRegression)' == 'true'" />
    
    <Error Text="❌ Performance regression detected! Build failed due to performance degradation." 
           Condition="'$(PerformanceValidationPassed)' == 'false' AND '$(FailBuildOnRegression)' == 'true'" />
    
    <Message Text="✅ Performance validation passed!" 
             Importance="high" 
             Condition="'$(PerformanceValidationPassed)' == 'true'" />
  </Target>

  <Target Name="UpdatePerformanceBaseline" AfterTargets="ValidatePerformanceThresholds" Condition="'$(AutoUpdateBaseline)' == 'true' AND '$(PerformanceValidationPassed)' == 'true'">
    <Message Text="Updating performance baseline..." Importance="high" />
    
    <!-- Generate new baseline from current results -->
    <PropertyGroup>
      <NewBaselineContent>{
  "version": "$(Version)",
  "timestamp": "$([System.DateTime]::UtcNow.ToString('yyyy-MM-ddTHH:mm:ss.fffZ'))",
  "configuration": "$(Configuration)",
  "targetFramework": "$(TargetFramework)",
  "benchmarks": {
    "note": "Baseline data would be populated from actual benchmark results"
  },
  "thresholds": {
    "performanceRegression": $(PerformanceRegressionThreshold),
    "memoryIncrease": $(MaxAllowedMemoryIncrease),
    "executionTimeIncrease": $(MaxExecutionTimeIncrease)
  }
}</NewBaselineContent>
    </PropertyGroup>
    
    <WriteLinesToFile File="$(PerformanceBaselinePath)" 
                      Lines="$(NewBaselineContent)" 
                      Overwrite="true" />
    
    <Message Text="Performance baseline updated: $(PerformanceBaselinePath)" Importance="normal" />
  </Target>

  <Target Name="GeneratePerformanceReport" AfterTargets="ValidatePerformanceThresholds" Condition="'$(GeneratePerformanceReports)' == 'true'">
    <Message Text="Generating performance reports..." Importance="high" />
    
    <MakeDir Directories="$(PerformanceReportPath)" />
    
    <!-- Collect all performance artifacts -->
    <ItemGroup>
      <PerformanceArtifacts Include="$(BenchmarkArtifactsPath)\**\*" Condition="Exists('$(BenchmarkArtifactsPath)')" />
      <PerformanceArtifacts Include="$(OutputPath)PerformanceTestResults.xml" Condition="Exists('$(OutputPath)PerformanceTestResults.xml')" />
      <PerformanceArtifacts Include="$(OutputPath)MemoryAnalysis.xml" Condition="Exists('$(OutputPath)MemoryAnalysis.xml')" />
      <PerformanceArtifacts Include="$(OutputPath)MemoryLeakDetection.xml" Condition="Exists('$(OutputPath)MemoryLeakDetection.xml')" />
      <PerformanceArtifacts Include="$(OutputPath)LoadTestResults.xml" Condition="Exists('$(OutputPath)LoadTestResults.xml')" />
      <PerformanceArtifacts Include="$(OutputPath)PerformanceValidation.xml" Condition="Exists('$(OutputPath)PerformanceValidation.xml')" />
    </ItemGroup>
    
    <!-- Copy artifacts to report directory -->
    <Copy SourceFiles="@(PerformanceArtifacts)" 
          DestinationFiles="@(PerformanceArtifacts->'$(PerformanceReportPath)\%(RecursiveDir)%(Filename)%(Extension)')" />
    
    <!-- Generate performance summary report -->
    <PropertyGroup>
      <PerformanceSummary>Performance Report Summary - $(MSBuildProjectName)
Generated: $([System.DateTime]::Now)
Configuration: $(Configuration)
Target Framework: $(TargetFramework)
Version: $(Version)

Performance Monitoring: $(EnablePerformanceMonitoring)
Benchmarking: $(PerformanceBenchmarkingEnabled)  
Memory Analysis: $(EnableMemoryAnalysis)
Load Testing: $(EnableLoadTesting)

Regression Threshold: $(PerformanceRegressionThreshold)%
Memory Threshold: $(MaxAllowedMemoryIncrease)%
Execution Time Threshold: $(MaxExecutionTimeIncrease)%

Baseline Path: $(PerformanceBaselinePath)
Baseline Exists: $(BaselineExists)
Validation Passed: $(PerformanceValidationPassed)

Artifacts: @(PerformanceArtifacts->'%(Filename)%(Extension)', ', ')</PerformanceSummary>
    </PropertyGroup>
    
    <WriteLinesToFile File="$(PerformanceReportPath)\PerformanceSummary.txt" 
                      Lines="$(PerformanceSummary)" 
                      Overwrite="true" />
    
    <Message Text="Performance report generated: $(PerformanceReportPath)" Importance="high" />
  </Target>

  <Target Name="CleanPerformanceArtifacts" BeforeTargets="Clean">
    <ItemGroup>
      <PerformanceArtifacts Include="$(BenchmarkOutputPath)\**\*" />
      <PerformanceArtifacts Include="$(OutputPath)PerformanceTestResults.xml" />
      <PerformanceArtifacts Include="$(OutputPath)MemoryAnalysis.xml" />
      <PerformanceArtifacts Include="$(OutputPath)MemoryLeakDetection.xml" />
      <PerformanceArtifacts Include="$(OutputPath)LoadTestResults.xml" />
      <PerformanceArtifacts Include="$(OutputPath)PerformanceValidation.xml" />
      <PerformanceArtifacts Include="$(PerformanceReportPath)\**\*" />
      <PerformanceArtifacts Include="$(OutputPath)MemoryDumps\**\*" />
    </ItemGroup>
    
    <Delete Files="@(PerformanceArtifacts)" ContinueOnError="true" />
    <RemoveDir Directories="$(BenchmarkOutputPath)" Condition="Exists('$(BenchmarkOutputPath)')" />
    <RemoveDir Directories="$(PerformanceReportPath)" Condition="Exists('$(PerformanceReportPath)')" />
    <RemoveDir Directories="$(OutputPath)MemoryDumps" Condition="Exists('$(OutputPath)MemoryDumps')" />
  </Target>

  <Target Name="InstallPerformanceTools" BeforeTargets="RunPerformanceBenchmarks" Condition="'$(RestorePerformanceTools)' == 'true'">
    <Message Text="Installing performance analysis tools..." Importance="high" />
    
    <!-- Install .NET diagnostic tools -->
    <Exec Command="dotnet tool install --global dotnet-counters" ContinueOnError="true" />
    <Exec Command="dotnet tool install --global dotnet-dump" ContinueOnError="true" />
    <Exec Command="dotnet tool install --global dotnet-trace" ContinueOnError="true" />
    <Exec Command="dotnet tool install --global dotnet-gcdump" ContinueOnError="true" />
    
    <!-- Install benchmarking tools -->
    <Exec Command="dotnet tool install --global BenchmarkDotNet.Tool" ContinueOnError="true" />
    
    <!-- Install memory analysis tools -->
    <Exec Command="dotnet tool install --global PerfView" ContinueOnError="true" />
  </Target>

</Project>
