---
name: Documentation Generation

on:
  push:
    branches: [main, develop]
    paths:
      - 'templates/**/*.md'
      - 'templates/**/docfx.json'
      - 'templates/**/toc.yml'
      - 'templates/**/filterConfig.yml'
      - 'scripts/generate-docs.*'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'templates/**/*.md'
      - 'templates/**/docfx.json'
      - 'templates/**/toc.yml'
      - 'templates/**/filterConfig.yml'
      - 'scripts/generate-docs.*'
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  generate-template-docs:
    name: Generate Template Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install DocFX
        run: dotnet tool install -g docfx

      - name: Install templates
        run: |
          dotnet new install ./templates/zentient-library-template
          dotnet new install ./templates/zentient-project-template

      - name: Generate library template documentation
        run: |
          mkdir -p test-docs/library
          cd test-docs/library
          dotnet new zentient-lib -n TestLibrary \
            --Author "Documentation Test" \
            --Company "Zentient Templates" \
            --Description "Test library for documentation generation" \
            --RepositoryUrl "https://github.com/test/repo" \
            --Tags "test;documentation"
          cd TestLibrary
          
          # Build the project to generate XML documentation
          dotnet restore
          dotnet build --configuration Release --verbosity normal
          
          # Generate documentation
          docfx docfx.json --serve false
          
          # Validate documentation was generated
          if [ ! -d "_site" ]; then
            echo "‚ùå Documentation was not generated for library template"
            exit 1
          fi
          
          echo "‚úÖ Library template documentation generated successfully"

      - name: Generate project template documentation
        run: |
          mkdir -p test-docs/project
          cd test-docs/project
          dotnet new zentient -n TestProject \
            --LIBRARY_AUTHOR "Documentation Test" \
            --LIBRARY_COMPANY "Zentient Templates" \
            --PROJECT_DESCRIPTION "Test project for documentation generation" \
            --REPOSITORY_URL "https://github.com/test/project" \
            --LIBRARY_TAGS "test;documentation;project"
          cd TestProject
          
          # Build the project to generate XML documentation
          dotnet restore
          dotnet build --configuration Release --verbosity normal
          
          # Generate documentation
          docfx docfx.json --serve false
          
          # Validate documentation was generated
          if [ ! -d "_site" ]; then
            echo "‚ùå Documentation was not generated for project template"
            exit 1
          fi
          
          echo "‚úÖ Project template documentation generated successfully"

      - name: Test documentation generation script
        run: |
          chmod +x ./scripts/generate-docs.sh
          
          # Test the script on library template
          cd test-docs/library/TestLibrary
          /workspace/scripts/generate-docs.sh check
          /workspace/scripts/generate-docs.sh validate
          
          # Test the script on project template  
          cd ../../project/TestProject
          /workspace/scripts/generate-docs.sh check
          /workspace/scripts/generate-docs.sh validate

      - name: Validate documentation quality
        run: |
          echo "üîç Validating documentation quality..."
          
          # Check library template documentation
          echo "üìö Checking library template documentation..."
          cd test-docs/library/TestLibrary/_site
          
          # Verify essential files exist
          files_to_check=("index.html" "api/index.html")
          for file in "${files_to_check[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing file: $file"
              exit 1
            fi
            echo "‚úÖ Found: $file"
          done
          
          # Check for broken links (basic check)
          if grep -r "404" . --include="*.html"; then
            echo "‚ö†Ô∏è Potential broken links found"
          fi
          
          # Check project template documentation
          echo "üìö Checking project template documentation..."
          cd ../../../project/TestProject/_site
          
          for file in "${files_to_check[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing file: $file"
              exit 1
            fi
            echo "‚úÖ Found: $file"
          done

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: template-documentation
          path: |
            test-docs/library/TestLibrary/_site/
            test-docs/project/TestProject/_site/
          retention-days: 7

      - name: Generate documentation report
        run: |
          echo "# Documentation Generation Report" > doc-report.md
          echo "" >> doc-report.md
          echo "Generated on: $(date)" >> doc-report.md
          echo "" >> doc-report.md
          
          echo "## Library Template Documentation" >> doc-report.md
          if [ -d "test-docs/library/TestLibrary/_site" ]; then
            echo "- ‚úÖ Generated successfully" >> doc-report.md
            echo "- üìä Size: $(du -sh test-docs/library/TestLibrary/_site | cut -f1)" >> doc-report.md
            echo "- üìÑ Files: $(find test-docs/library/TestLibrary/_site -type f | wc -l)" >> doc-report.md
          else
            echo "- ‚ùå Generation failed" >> doc-report.md
          fi
          
          echo "" >> doc-report.md
          echo "## Project Template Documentation" >> doc-report.md
          if [ -d "test-docs/project/TestProject/_site" ]; then
            echo "- ‚úÖ Generated successfully" >> doc-report.md
            echo "- üìä Size: $(du -sh test-docs/project/TestProject/_site | cut -f1)" >> doc-report.md
            echo "- üìÑ Files: $(find test-docs/project/TestProject/_site -type f | wc -l)" >> doc-report.md
          else
            echo "- ‚ùå Generation failed" >> doc-report.md
          fi
          
          echo "" >> doc-report.md
          echo "## Template Files Validated" >> doc-report.md
          echo "- DocFX configurations: $(find templates -name "docfx.json" | wc -l)" >> doc-report.md
          echo "- Filter configurations: $(find templates -name "filterConfig.yml" | wc -l)" >> doc-report.md
          echo "- Documentation targets: $(find templates -name "Directory.Documentation.targets" | wc -l)" >> doc-report.md
          
          cat doc-report.md

      - name: Upload documentation report
        uses: actions/upload-artifact@v4
        with:
          name: documentation-report
          path: doc-report.md
          retention-days: 30

  validate-docs-cross-platform:
    name: Cross-Platform Documentation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install DocFX
        run: dotnet tool install -g docfx

      - name: Install library template
        run: dotnet new install ./templates/zentient-library-template

      - name: Test documentation generation on ${{ matrix.os }}
        run: |
          dotnet new zentient-lib -n CrossPlatformDocTest
          cd CrossPlatformDocTest
          dotnet restore
          dotnet build --configuration Release
          docfx docfx.json --serve false

      - name: Verify documentation generated
        shell: bash
        run: |
          cd CrossPlatformDocTest
          if [ ! -d "_site" ]; then
            echo "‚ùå Documentation generation failed on ${{ matrix.os }}"
            exit 1
          fi
          echo "‚úÖ Documentation generated successfully on ${{ matrix.os }}"

  documentation-summary:
    name: Documentation Summary
    runs-on: ubuntu-latest
    needs: [generate-template-docs, validate-docs-cross-platform]
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "Template documentation generation: ${{ needs.generate-template-docs.result }}"
          echo "Cross-platform validation: ${{ needs.validate-docs-cross-platform.result }}"
          
          if [[ "${{ needs.generate-template-docs.result }}" == "success" && 
                "${{ needs.validate-docs-cross-platform.result }}" == "success" ]]; then
            echo "‚úÖ All documentation tests passed!"
          else
            echo "‚ùå Some documentation tests failed"
            exit 1
          fi
