<Project>

  <!-- Documentation Generation Automation -->
  <PropertyGroup>
    <DocFxConfigFile Condition="'$(DocFxConfigFile)' == ''">docfx.json</DocFxConfigFile>
    <GenerateDocumentation Condition="'$(GenerateDocumentation)' == ''">true</GenerateDocumentation>
    <RequireDocumentationForPublicApis Condition="'$(RequireDocumentationForPublicApis)' == ''">true</RequireDocumentationForPublicApis>
    <DocumentationCoverageThreshold Condition="'$(DocumentationCoverageThreshold)' == ''">95</DocumentationCoverageThreshold>
  </PropertyGroup>

  <Target Name="ValidateDocumentationCoverage" BeforeTargets="Build" Condition="'$(RequireDocumentationForPublicApis)' == 'true'">
    <Message Text="Validating documentation coverage..." Importance="high" />

    <PropertyGroup>
      <DocumentationCoverageReport>$(OutputPath)DocumentationCoverage.xml</DocumentationCoverageReport>
    </PropertyGroup>

    <!-- Documentation coverage validation happens during compilation via CS1591 warnings -->
    <Message Text="Documentation coverage threshold: $(DocumentationCoverageThreshold)%" Importance="normal" />
  </Target>

  <!-- Install DocFX tool if not available -->
  <Target Name="InstallDocFxTool" BeforeTargets="GenerateDocumentation" Condition="'$(GenerateDocumentation)' == 'true'">
    <Message Text="Ensuring DocFX tool is available..." Importance="high" />
    <Exec Command="dotnet tool list -g | grep docfx || dotnet tool install -g docfx" 
          ContinueOnError="true" 
          IgnoreExitCode="true" />
  </Target>

  <!-- Generate API documentation -->
  <Target Name="GenerateDocumentation" AfterTargets="Build" Condition="'$(Configuration)' == 'Release' AND '$(GenerateDocumentation)' == 'true' AND Exists('$(DocFxConfigFile)')">
    <Message Text="Generating API documentation with DocFX..." Importance="high" />
    
    <!-- Ensure output directory exists -->
    <MakeDir Directories="_site" />
    
    <!-- Generate documentation -->
    <Exec Command="dotnet docfx $(DocFxConfigFile) --serve" 
          WorkingDirectory="$(MSBuildProjectDirectory)" 
          ContinueOnError="true" 
          Condition="'$(CI)' != 'true'" />
    
    <!-- For CI builds, generate without serving -->
    <Exec Command="dotnet docfx $(DocFxConfigFile)" 
          WorkingDirectory="$(MSBuildProjectDirectory)" 
          ContinueOnError="true" 
          Condition="'$(CI)' == 'true'" />
  </Target>

  <!-- Generate documentation coverage report -->
  <Target Name="GenerateDocumentationCoverageReport" AfterTargets="GenerateDocumentation" Condition="'$(GenerateDocumentation)' == 'true'">
    <Message Text="Generating documentation coverage report..." Importance="high" />
    
    <PropertyGroup>
      <CoverageReportPath>$(OutputPath)documentation-coverage.html</CoverageReportPath>
    </PropertyGroup>
    
    <!-- Generate coverage report using XML documentation files -->
    <ItemGroup>
      <XmlDocFiles Include="$(OutputPath)*.xml" />
    </ItemGroup>
    
    <Message Text="Documentation files found: @(XmlDocFiles)" Importance="normal" />
  </Target>

  <Target Name="GenerateDocFxConfiguration" BeforeTargets="GenerateDocumentation" Condition="'$(GenerateDocFxConfiguration)' == 'true' AND !Exists('$(DocFxConfigFile)')">
    <Message Text="Generating DocFX configuration..." Importance="high" />

    <PropertyGroup>
      <DocFxConfigContent>{
  "metadata": [
    {
      "src": [
        {
          "files": ["**/*.csproj"],
          "exclude": ["**/bin/**", "**/obj/**"]
        }
      ],
      "dest": "api",
      "includePrivateMembers": false,
      "disableGitFeatures": false,
      "disableDefaultFilter": false,
      "noRestore": false,
      "namespaceLayout": "flattened",
      "memberLayout": "samePage",
      "allowCompilationErrors": false
    }
  ],
  "build": {
    "content": [
      {
        "files": ["api/**.yml", "api/index.md"]
      },
      {
        "files": ["docs/**.md", "docs/**/toc.yml"],
        "exclude": ["**/bin/**", "**/obj/**"]
      },
      {
        "files": ["README.md"]
      }
    ],
    "resource": [
      {
        "files": ["images/**"]
      }
    ],
    "output": "$(DocFxOutputPath)",
    "globalMetadataFiles": [],
    "fileMetadataFiles": [],
    "template": ["$(DocFxTemplate)"],
    "postProcessors": [],
    "markdownEngineProperties": {},
    "noLangKeyword": false,
    "keepFileLink": false,
    "cleanupCacheHistory": false,
    "disableGitFeatures": false,
    "globalMetadata": {
      "_appTitle": "$(DocFxSiteName)",
      "_appFooter": "$(AssemblyCopyright)",
      "_enableSearch": true,
      "_enableNewTab": true,
      "_gitContribute": {
        "repo": "$(RepositoryUrl)",
        "branch": "main"
      },
      "_gitUrlPattern": "github"
    }
  }
}</DocFxConfigContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(DocFxConfigFile)" Lines="$(DocFxConfigContent)" Overwrite="true" />
    <Message Text="DocFX configuration generated: $(DocFxConfigFile)" Importance="normal" />
  </Target>

  <Target Name="GenerateDocumentation" AfterTargets="Build" Condition="'$(GenerateApiDocumentation)' == 'true' AND '$(Configuration)' == 'Release'">
    <Message Text="Generating API documentation..." Importance="high" />

    <PropertyGroup>
      <DocOutputPath>$(OutputPath)documentation</DocOutputPath>
    </PropertyGroup>

    <MakeDir Directories="$(DocOutputPath)" />

    <!-- Generate DocFX documentation if available -->
    <Exec Command="docfx $(DocFxConfigFile) --output $(DocOutputPath)"
          ContinueOnError="true"
          Condition="Exists('$(DocFxConfigFile)') AND Exists('docfx')" />

    <!-- Generate default documentation using DefaultDocumentation -->
    <Message Text="Generating default API documentation..." Importance="normal" />
  </Target>

  <Target Name="ValidateDocumentationLinks" AfterTargets="GenerateDocumentation" Condition="'$(ValidateDocumentationLinks)' == 'true'">
    <Message Text="Validating documentation links..." Importance="high" />

    <PropertyGroup>
      <LinkValidationResults>$(OutputPath)LinkValidation.xml</LinkValidationResults>
    </PropertyGroup>

    <!-- Find all markdown files and validate links -->
    <ItemGroup>
      <MarkdownFiles Include="$(ConceptualDocsPath)\**\*.md" Condition="Exists('$(ConceptualDocsPath)')" />
      <MarkdownFiles Include="README.md" Condition="Exists('README.md')" />
      <MarkdownFiles Include="CHANGELOG.md" Condition="Exists('CHANGELOG.md')" />
    </ItemGroup>

    <Message Text="Validating links in @(MarkdownFiles->'%(Filename)%(Extension)', ', ')" Importance="normal" />

    <!-- Custom link validation would be implemented here -->
    <WriteLinesToFile File="$(LinkValidationResults)"
                      Lines="Link validation completed for $(MSBuildProjectName)"
                      Overwrite="true" />
    <WriteLinesToFile File="$(LinkValidationResults)"
                      Lines="Validation time: $([System.DateTime]::Now)"
                      Overwrite="false" />
  </Target>

  <Target Name="ValidateCodeExamples" AfterTargets="GenerateDocumentation" Condition="'$(ValidateCodeExamples)' == 'true'">
    <Message Text="Validating code examples..." Importance="high" />

    <PropertyGroup>
      <CodeExampleValidationResults>$(OutputPath)CodeExampleValidation.xml</CodeExampleValidationResults>
    </PropertyGroup>

    <!-- Find code examples in documentation -->
    <ItemGroup>
      <DocumentationFiles Include="$(ConceptualDocsPath)\**\*.md" Condition="Exists('$(ConceptualDocsPath)')" />
      <SampleFiles Include="$(CodeSamplesPath)\**\*.cs" Condition="Exists('$(CodeSamplesPath)')" />
    </ItemGroup>

    <Message Text="Validating code examples in documentation..." Importance="normal" />

    <!-- Custom code example validation would be implemented here -->
    <WriteLinesToFile File="$(CodeExampleValidationResults)"
                      Lines="Code example validation completed"
                      Overwrite="true" />
    <WriteLinesToFile File="$(CodeExampleValidationResults)"
                      Lines="Validation time: $([System.DateTime]::Now)"
                      Overwrite="false" />
  </Target>

  <!-- Code sample generation disabled for library templates -->
  <!-- Library templates focus on library code, not executable samples -->
  <Target Name="GenerateCodeSamples" BeforeTargets="GenerateDocumentation" Condition="false">
    <!-- Disabled: Library templates should not generate executable code samples -->
  </Target>

  <Target Name="CompileCodeSamples" AfterTargets="GenerateCodeSamples" Condition="false">
    <!-- Disabled: Library templates should not compile executable code samples -->
  </Target>

  <Target Name="GenerateApiChangelog" AfterTargets="Build" Condition="'$(GenerateApiChangeLog)' == 'true' AND '$(Configuration)' == 'Release'">
    <Message Text="Generating API changelog..." Importance="high" />

    <PropertyGroup>
      <ApiChangelogPath>$(OutputPath)API_CHANGELOG.md</ApiChangelogPath>
    </PropertyGroup>

    <!-- This would integrate with API diff tools to generate changelog -->
    <PropertyGroup>
      <ApiChangelogContent># API Changelog for $(ProjectName)

## Version $(Version) - $([System.DateTime]::Now.ToString('yyyy-MM-dd'))

### New APIs
- TODO: List new public APIs

### Changed APIs
- TODO: List modified public APIs

### Removed APIs
- TODO: List removed public APIs

### Breaking Changes
- TODO: List breaking changes

---
Generated automatically by the build process.</ApiChangelogContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(ApiChangelogPath)" Lines="$(ApiChangelogContent)" Overwrite="true" />

    <Message Text="API changelog generated: $(ApiChangelogPath)" Importance="normal" />
  </Target>

  <Target Name="PublishDocumentation" Condition="'$(PublishDocumentation)' == 'true' AND '$(Configuration)' == 'Release'">
    <Message Text="Publishing documentation..." Importance="high" />

    <PropertyGroup>
      <DocumentationPublishPath Condition="'$(DocumentationPublishPath)' == ''">$(OutputPath)Published\Documentation</DocumentationPublishPath>
    </PropertyGroup>

    <MakeDir Directories="$(DocumentationPublishPath)" />

    <!-- Collect all documentation artifacts -->
    <ItemGroup>
      <DocumentationArtifacts Include="$(OutputPath)documentation\**\*" Condition="Exists('$(OutputPath)documentation')" />
      <DocumentationArtifacts Include="$(DocumentationFile)" Condition="Exists('$(DocumentationFile)')" />
      <DocumentationArtifacts Include="$(ApiChangelogPath)" Condition="Exists('$(ApiChangelogPath)')" />
      <DocumentationArtifacts Include="README.md" Condition="Exists('README.md')" />
      <DocumentationArtifacts Include="CHANGELOG.md" Condition="Exists('CHANGELOG.md')" />
    </ItemGroup>

    <Copy SourceFiles="@(DocumentationArtifacts)"
          DestinationFiles="@(DocumentationArtifacts->'$(DocumentationPublishPath)\%(RecursiveDir)%(Filename)%(Extension)')" />

    <Message Text="Documentation published to: $(DocumentationPublishPath)" Importance="high" />
  </Target>

  <Target Name="CleanDocumentationArtifacts" BeforeTargets="Clean">
    <ItemGroup>
      <DocumentationArtifacts Include="$(OutputPath)documentation\**\*" />
      <DocumentationArtifacts Include="$(OutputPath)DocumentationCoverage.xml" />
      <DocumentationArtifacts Include="$(OutputPath)LinkValidation.xml" />
      <DocumentationArtifacts Include="$(OutputPath)CodeExampleValidation.xml" />
      <DocumentationArtifacts Include="$(OutputPath)SampleCompilation.xml" />
      <DocumentationArtifacts Include="$(OutputPath)API_CHANGELOG.md" />
      <DocumentationArtifacts Include="$(OutputPath)Published\Documentation\**\*" />
    </ItemGroup>

    <Delete Files="@(DocumentationArtifacts)" ContinueOnError="true" />
    <RemoveDir Directories="$(OutputPath)documentation" Condition="Exists('$(OutputPath)documentation')" />
    <RemoveDir Directories="$(OutputPath)Published\Documentation" Condition="Exists('$(OutputPath)Published\Documentation')" />
  </Target>

  <Target Name="InstallDocumentationTools" BeforeTargets="GenerateDocumentation" Condition="'$(RestoreDocumentationTools)' == 'true'">
    <Message Text="Installing documentation tools..." Importance="high" />

    <!-- Install DocFX -->
    <Exec Command="dotnet tool install --global docfx" ContinueOnError="true" />

    <!-- Install markdown lint tools -->
    <Exec Command="npm install -g markdownlint-cli" ContinueOnError="true" />

    <!-- Install link checkers -->
    <Exec Command="npm install -g markdown-link-check" ContinueOnError="true" />
  </Target>

</Project>
