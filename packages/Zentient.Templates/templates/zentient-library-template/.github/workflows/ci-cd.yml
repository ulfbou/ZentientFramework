---
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: >-
            ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json',
            '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: >
          dotnet build --configuration ${{ matrix.configuration }}
          --no-restore -v diag

      - name: Run tests
        run: >
          dotnet test
          --configuration ${{ matrix.configuration }}
          --no-build
          --verbosity diag
          --logger trx
          --logger "console;verbosity=detailed"
          --collect:"XPlat Code Coverage"
          --results-directory ./TestResults/

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.configuration }}
          path: TestResults/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.configuration == 'Release'
        with:
          file: TestResults/*/coverage.cobertura.xml
          flags: unittests
          name: codecov-umbrella

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: >-
            ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json',
            '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Run code analysis
        run: >
          dotnet build --configuration Release -p:RunCodeAnalysis=true -v diag

      - name: Run security scan
        run: >
          dotnet build --configuration Release -p:RunSecurityCodeAnalysis=true
          -v diag

      - name: Format check
        run: dotnet format --verify-no-changes --verbosity diagnostic

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore -v diag

      - name: Run vulnerability scan
        run: dotnet list package --vulnerable --include-transitive

      - name: Run dependency audit
        run: >
          dotnet restore --verbosity normal 2>&1 |
          grep -i "vulnerability\|security" || true

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore -v diag

      - name: Run benchmarks
        run: >
          dotnet build --configuration Release
          -p:PerformanceBenchmarkingEnabled=true -v diag

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: "**/BenchmarkDotNet.Artifacts/**/*"

  package:
    name: Create Package
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security]
    if: github.event_name == 'push' &&
      (startsWith(github.ref, 'refs/tags/v') ||
      github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: >-
            ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json',
            '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore -v diag

      - name: Generate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            VERSION="1.0.0-dev.$GITHUB_RUN_NUMBER"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Create package
        run: >
          dotnet pack
          --configuration Release
          --no-restore
          -p:PackageVersion=${{ steps.version.outputs.version }}
          -p:IncludeSymbols=true
          -p:SymbolPackageFormat=snupkg
          --output ./artifacts/
          -v diag

      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nuget-packages
          path: artifacts/*.nupkg

      - name: Upload symbol packages
        uses: actions/upload-artifact@v3
        with:
          name: symbol-packages
          path: artifacts/*.snupkg

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js (for DocFX)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install DocFX
        run: dotnet tool install --global docfx

      - name: Restore dependencies
        run: dotnet restore -v diag

      - name: Generate documentation
        run: >
          dotnet build --configuration Release
          -p:GenerateDocumentation=true -v diag

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security, package]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: nuget-packages
          path: ./artifacts/

      - name: Download symbol packages
        uses: actions/download-artifact@v3
        with:
          name: symbol-packages
          path: ./artifacts/

      - name: Extract release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md |
            head -n -1 > release_notes.md
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.release_notes.outputs.version }}
          body_path: release_notes.md
          files: |
            artifacts/*.nupkg
            artifacts/*.snupkg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v') && secrets.NUGET_API_KEY != ''
    environment: production
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: nuget-packages
          path: ./artifacts/

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish to NuGet
        run: |
          for package in ./artifacts/*.nupkg; do
            echo "Publishing $package"
            dotnet nuget push "$package" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs:
      - build-and-test
      - code-quality
      - security
      - benchmarks
      - package
      - documentation
      - release
      - publish
    steps:
      - name: Delete old artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            test-results-Debug
            benchmark-results
          failOnError: false
