<Project>

  <Target Name="RunSecurityScan" BeforeTargets="Build" Condition="'$(RunSecurityCodeAnalysis)' == 'true'">
    <Message Text="Running security analysis..." Importance="high" />

    <PropertyGroup>
      <SecurityScanResults>$(OutputPath)SecurityScanResults.xml</SecurityScanResults>
    </PropertyGroup>

    <!-- Run security analyzers (they execute automatically with the build) -->
    <Message Text="Security analyzers will run during compilation..." Importance="normal" />
  </Target>

  <Target Name="ValidateCryptographicStandards" BeforeTargets="Build" Condition="'$(EnforceCryptographicStandards)' == 'true'">
    <Message Text="Validating cryptographic standards..." Importance="high" />

    <!-- Create custom validation task for cryptographic standards -->
    <PropertyGroup>
      <CryptographicValidationResults>$(OutputPath)CryptographicValidation.xml</CryptographicValidationResults>
    </PropertyGroup>

    <Message Text="Minimum RSA key size: $(MinimumRSAKeySize)" Importance="normal" />
    <Message Text="Allowed hash algorithms: $(AllowedHashAlgorithms)" Importance="normal" />
    <Message Text="Prohibited algorithms: $(ProhibitedAlgorithms)" Importance="normal" />
  </Target>

  <Target Name="ValidateInputSafety" BeforeTargets="Build" Condition="'$(ValidateUserInputs)' == 'true'">
    <Message Text="Validating input safety measures..." Importance="high" />

    <PropertyGroup>
      <InputValidationResults>$(OutputPath)InputValidation.xml</InputValidationResults>
    </PropertyGroup>

    <Message Text="Maximum string length: $(MaxStringLength)" Importance="normal" />
    <Message Text="Maximum file size: $(MaxFileSize)" Importance="normal" />
    <Message Text="Allowed URL schemes: $(AllowedSchemes)" Importance="normal" />
  </Target>

  <Target Name="ScanDependencyVulnerabilities" BeforeTargets="Build" Condition="'$(ScanNuGetPackages)' == 'true'">
    <Message Text="Scanning dependencies for vulnerabilities..." Importance="high" />

    <PropertyGroup>
      <DependencyScanResults>$(OutputPath)DependencyVulnerabilities.xml</DependencyScanResults>
    </PropertyGroup>

    <!-- NuGet audit runs automatically when NuGetAudit is enabled -->
    <Message Text="NuGet audit level: $(AuditLevel)" Importance="normal" />
    <Message Text="Allowed licenses: $(AllowedLicenses)" Importance="normal" />
  </Target>

  <Target Name="ValidateAssemblySecurity" AfterTargets="Build" Condition="'$(ValidateSecurityAttributes)' == 'true'">
    <Message Text="Validating assembly security attributes..." Importance="high" />

    <PropertyGroup>
      <AssemblySecurityResults>$(OutputPath)AssemblySecurity.xml</AssemblySecurityResults>
    </PropertyGroup>

    <!-- Check if assembly has appropriate security attributes -->
    <ItemGroup>
      <AssemblyFiles Include="$(OutputPath)$(AssemblyName).dll" />
      <AssemblyFiles Include="$(OutputPath)$(AssemblyName).exe" Condition="'$(OutputType)' == 'Exe'" />
    </ItemGroup>

    <Message Text="Validating security attributes for: @(AssemblyFiles)" Importance="normal" />
  </Target>

  <Target Name="RunBinarySecurityAnalysis" AfterTargets="Build" Condition="'$(PerformBinaryAnalysis)' == 'true'">
    <Message Text="Running binary security analysis..." Importance="high" />

    <PropertyGroup>
      <BinaryAnalysisResults>$(OutputPath)BinaryAnalysis.xml</BinaryAnalysisResults>
    </PropertyGroup>

    <!-- Use binskim for binary analysis if available -->
    <Exec Command="binskim analyze $(OutputPath)$(AssemblyName).dll --output $(BinaryAnalysisResults) --verbose"
          ContinueOnError="true"
          Condition="Exists('binskim')" />

    <Message Text="Binary analysis completed. Results: $(BinaryAnalysisResults)"
             Importance="high"
             Condition="Exists('$(BinaryAnalysisResults)')" />
  </Target>

  <Target Name="ValidateThreatModel" BeforeTargets="Build" Condition="'$(EnableThreatModeling)' == 'true' AND Exists('$(ThreatModelPath)')">
    <Message Text="Validating threat model: $(ThreatModelPath)" Importance="high" />

    <PropertyGroup>
      <ThreatModelResults>$(OutputPath)ThreatModelValidation.xml</ThreatModelResults>
    </PropertyGroup>

    <!-- Custom threat model validation logic would go here -->
    <Message Text="Threat model validation completed." Importance="normal" />
  </Target>

  <Target Name="ValidateSecurityRequirements" BeforeTargets="Build" Condition="'$(ValidateSecurityRequirements)' == 'true' AND Exists('$(SecurityRequirementsPath)')">
    <Message Text="Validating security requirements: $(SecurityRequirementsPath)" Importance="high" />

    <PropertyGroup>
      <SecurityRequirementsResults>$(OutputPath)SecurityRequirementsValidation.xml</SecurityRequirementsResults>
    </PropertyGroup>

    <!-- Custom security requirements validation logic would go here -->
    <Message Text="Security requirements validation completed." Importance="normal" />
  </Target>

  <Target Name="GenerateSecurityReport" AfterTargets="Build" Condition="'$(Configuration)' == 'Release'">
    <PropertyGroup>
      <SecurityReportDir>$(OutputPath)SecurityReports</SecurityReportDir>
    </PropertyGroup>

    <MakeDir Directories="$(SecurityReportDir)" Condition="!Exists('$(SecurityReportDir)')" />

    <Message Text="Generating security report in: $(SecurityReportDir)" Importance="high" />

    <!-- Collect all security analysis results -->
    <ItemGroup>
      <SecurityResults Include="$(SecurityScanResults)" Condition="Exists('$(SecurityScanResults)')" />
      <SecurityResults Include="$(CryptographicValidationResults)" Condition="Exists('$(CryptographicValidationResults)')" />
      <SecurityResults Include="$(InputValidationResults)" Condition="Exists('$(InputValidationResults)')" />
      <SecurityResults Include="$(DependencyScanResults)" Condition="Exists('$(DependencyScanResults)')" />
      <SecurityResults Include="$(AssemblySecurityResults)" Condition="Exists('$(AssemblySecurityResults)')" />
      <SecurityResults Include="$(BinaryAnalysisResults)" Condition="Exists('$(BinaryAnalysisResults)')" />
      <SecurityResults Include="$(ThreatModelResults)" Condition="Exists('$(ThreatModelResults)')" />
      <SecurityResults Include="$(SecurityRequirementsResults)" Condition="Exists('$(SecurityRequirementsResults)')" />
    </ItemGroup>

    <Copy SourceFiles="@(SecurityResults)" DestinationFolder="$(SecurityReportDir)" />

    <!-- Generate consolidated security report -->
    <ItemGroup>
      <SecuritySummaryLines Include="Security Analysis Summary - $(MSBuildProjectName)" />
      <SecuritySummaryLines Include="Generated: $([System.DateTime]::Now)" />
      <SecuritySummaryLines Include="Configuration: $(Configuration)" />
      <SecuritySummaryLines Include="Security Analysis Level: $(SecurityAnalysisLevel)" />
      <SecuritySummaryLines Include="Files Analyzed: %(SecurityResults.Filename)%(SecurityResults.Extension)" />
    </ItemGroup>

    <WriteLinesToFile File="$(SecurityReportDir)\SecuritySummary.txt"
                      Lines="@(SecuritySummaryLines)"
                      Overwrite="true" />
  </Target>

  <Target Name="ValidateSecurityGates" AfterTargets="Build" Condition="'$(Configuration)' == 'Release'">
    <Message Text="Validating security gates..." Importance="high" />

    <!-- Check if any security violations were found -->
    <PropertyGroup>
      <SecurityGatesPassed>true</SecurityGatesPassed>
    </PropertyGroup>

    <!-- This would be enhanced with actual gate validation logic -->
    <Error Text="❌ Security gates failed! Check security reports for details."
           Condition="'$(SecurityGatesPassed)' == 'false'" />

    <Message Text="✅ All security gates passed!"
             Importance="high"
             Condition="'$(SecurityGatesPassed)' == 'true'" />
  </Target>

  <Target Name="InstallSecurityTools" BeforeTargets="Build" Condition="'$(RestoreSecurityTools)' == 'true'">
    <Message Text="Installing security analysis tools..." Importance="high" />

    <!-- Install security analysis tools -->
    <Exec Command="dotnet tool install --global microsoft.codeanalysis.binskim"
          ContinueOnError="true" />

    <Exec Command="dotnet tool install --global security-scan"
          ContinueOnError="true" />

    <Exec Command="dotnet tool install --global dotnet-outdated-tool"
          ContinueOnError="true" />
  </Target>

  <Target Name="CleanSecurityArtifacts" BeforeTargets="Clean">
    <ItemGroup>
      <SecurityArtifacts Include="$(OutputPath)SecurityScanResults.xml" />
      <SecurityArtifacts Include="$(OutputPath)CryptographicValidation.xml" />
      <SecurityArtifacts Include="$(OutputPath)InputValidation.xml" />
      <SecurityArtifacts Include="$(OutputPath)DependencyVulnerabilities.xml" />
      <SecurityArtifacts Include="$(OutputPath)AssemblySecurity.xml" />
      <SecurityArtifacts Include="$(OutputPath)BinaryAnalysis.xml" />
      <SecurityArtifacts Include="$(OutputPath)ThreatModelValidation.xml" />
      <SecurityArtifacts Include="$(OutputPath)SecurityRequirementsValidation.xml" />
      <SecurityArtifacts Include="$(OutputPath)SecurityReports\**\*" />
    </ItemGroup>

    <Delete Files="@(SecurityArtifacts)" ContinueOnError="true" />
    <RemoveDir Directories="$(OutputPath)SecurityReports" Condition="Exists('$(OutputPath)SecurityReports')" />
  </Target>

  <Target Name="PublishSecurityReport" Condition="'$(PublishSecurityReports)' == 'true' AND '$(Configuration)' == 'Release'">
    <Message Text="Publishing security reports..." Importance="high" />

    <PropertyGroup>
      <SecurityReportPublishPath Condition="'$(SecurityReportPublishPath)' == ''">$(OutputPath)Published\SecurityReports</SecurityReportPublishPath>
    </PropertyGroup>

    <MakeDir Directories="$(SecurityReportPublishPath)" />

    <ItemGroup>
      <SecurityReportFiles Include="$(OutputPath)SecurityReports\**\*" />
    </ItemGroup>

    <Copy SourceFiles="@(SecurityReportFiles)"
          DestinationFiles="@(SecurityReportFiles->'$(SecurityReportPublishPath)\%(RecursiveDir)%(Filename)%(Extension)')" />

    <Message Text="Security reports published to: $(SecurityReportPublishPath)" Importance="high" />
  </Target>

</Project>
